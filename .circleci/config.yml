version: 2.1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan frontend
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan back-end
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical 
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip
          command: 
              yum install -y tar gzip
      - run:
          name: Deploy Infra
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-stack \
              --parameter-overrides ID=b952f0a
          no_output_timeout: 30m

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9f:d3:2e:da:c0:2e:31:bb:b2:a3:4a:d0:b8:ea:df:18"]
      - attach_workspace:
          at: ~/
      # - run: udacity12 975186df
      #     name: Install tar gzip AA
      #     command: yum install -y tar gzip
      - run:
          name: Install ansible
          command: apk add --update ansible
      - run:
          name: Install openssh
          command: apk add openssh-client
      - run:
          name: Configure server
          command: |
            # cd .circleci/ansible && \
            # ansible-playbook -i ~/project/.circleci/ansible/inventory.txt configure-server.yml
            cd .circleci/ansible && \
            ansible-playbook -i inventory.txt configure-server.yml
          # no_output_timeout: 30m

  run-migrations:
    docker:
      - image: cimg/node:19.0.0

    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm audit fix 
            npm audit fix --force
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/BaNERV9WMY3r1jMGgJoYCY/migration_b952f0a  -d '1'
            fi
            
workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      - run-migrations
          # requires: [configure-infrastructure]
